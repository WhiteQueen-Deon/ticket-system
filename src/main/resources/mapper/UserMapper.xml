<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.easyticket.mapper.UserMapper">

    <!-- 用户结果映射 -->
    <resultMap id="userResultMap" type="com.easyticket.entity.User">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="email" column="email" />
        <result property="enabled" column="enabled" />
        <result property="activationToken" column="activation_token" />
        <result property="roles" column="roles" />
        <result property="registrationDate" column="registration_date" />
        <result property="nickname" column="nickname" />
        <result property="phone" column="phone" />
        <result property="createTime" column="create_time" />
        <result property="updateTime" column="update_time" />
    </resultMap>

    <!-- 根据ID查询用户 -->
    <select id="findById" parameterType="long" resultMap="userResultMap">
        SELECT * FROM users WHERE id = #{id}
    </select>

    <!-- 根据用户名查询用户 -->
    <select id="findByUsername" parameterType="string" resultMap="userResultMap">
        SELECT * FROM users WHERE username = #{username}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="findByEmail" parameterType="string" resultMap="userResultMap">
        SELECT * FROM users WHERE email = #{email}
    </select>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="com.easyticket.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, password, email, enabled, activation_token, roles, registration_date, nickname, phone, create_time, update_time)
        VALUES (#{username}, #{password}, #{email}, #{enabled}, #{activationToken}, #{roles}, #{registrationDate}, #{nickname}, #{phone}, #{createTime}, #{updateTime})
    </insert>

    <!-- 更新用户信息 -->
    <update id="update" parameterType="com.easyticket.entity.User">
        UPDATE users SET
            username = #{username},
            email = #{email},
            enabled = #{enabled},
            activation_token = #{activationToken},
            roles = #{roles},
            registration_date = #{registrationDate},
            nickname = #{nickname},
            phone = #{phone},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM users WHERE id = #{id}
    </delete>

    <!-- 检查用户名是否存在 -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT COUNT(1) > 0 FROM users WHERE username = #{username}
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(1) > 0 FROM users WHERE email = #{email}
    </select>

    <!-- 根据ID和邮箱查询用户 -->
    <select id="findByIdAndEmail" resultMap="userResultMap">
        SELECT * FROM users WHERE id = #{id} AND email = #{email}
    </select>

    <!-- 激活用户账户 -->
    <update id="updateActivationStatus" parameterType="long">
        UPDATE users SET enabled = #{activated}, activation_token = null, update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 更新用户密码 -->
    <update id="updatePassword">
        UPDATE users SET password = #{password} WHERE id = #{id}
    </update>

    <!-- 分页查询用户列表 -->
    <select id="findAllUsers" resultMap="userResultMap">
        SELECT * FROM users
        <where>
            1=1
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%')
                    OR email LIKE CONCAT('%', #{keyword}, '%')
                    OR nickname LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND roles LIKE CONCAT('%', #{role}, '%')
            </if>
            <if test="enabled != null">
                AND enabled = #{enabled}
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 获取用户总数 -->
    <select id="countAllUsers" resultType="long">
        SELECT COUNT(*) FROM users
        <where>
            1=1
            <if test="keyword != null and keyword != ''">
                AND (username LIKE CONCAT('%', #{keyword}, '%')
                    OR email LIKE CONCAT('%', #{keyword}, '%')
                    OR nickname LIKE CONCAT('%', #{keyword}, '%'))
            </if>
            <if test="role != null and role != ''">
                AND roles LIKE CONCAT('%', #{role}, '%')
            </if>
            <if test="enabled != null">
                AND enabled = #{enabled}
            </if>
        </where>
    </select>

    <!-- 更新用户角色 -->
    <update id="updateRoles">
        UPDATE users SET roles = #{roles}, update_time = NOW() WHERE id = #{id}
    </update>

    <!-- 更新用户启用状态 -->
    <update id="updateEnabledStatus">
        UPDATE users SET enabled = #{enabled}, update_time = NOW() WHERE id = #{id}
    </update>

    <!-- 批量删除用户 -->
    <delete id="deleteByIds">
        DELETE FROM users WHERE id IN
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <!-- 获取用户统计信息 -->
    <select id="getUserStats" resultType="map">
        SELECT
            COUNT(*) as totalUsers,
            COUNT(CASE WHEN enabled = true THEN 1 END) as activeUsers,
            COUNT(CASE WHEN enabled = false THEN 1 END) as inactiveUsers,
            COUNT(CASE WHEN roles LIKE '%ROLE_ADMIN%' THEN 1 END) as adminUsers,
            COUNT(CASE WHEN roles LIKE '%ROLE_MANAGER%' THEN 1 END) as managerUsers,
            COUNT(CASE WHEN roles LIKE '%ROLE_CUSTOMER%' THEN 1 END) as customerUsers
        FROM users
    </select>

</mapper>
